"use strict";

const Base = require('./Base')
const moment = require('moment')
const req = require('../utils/req')
const errors = require('../errors')

/**
 * –ö–ª–∞—Å—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∫ —Ü–µ–ª–∏
 * @constructor
 */
function Contract (data) {
    let self = this
    
    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    Base.call(this)

    data = data || {}
    
    /**
     * –ú–∞—Å—Å–∏–≤ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –≤ –ø–æ–ª–Ω–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π
     * @type {[string,string,string,string,string,string,string]}
     */
    const weekdays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    
    /**
     * –ú–∞—Å—Å–∏–≤ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π, —É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π –¥–æ —Ç—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
     * @type {Array}
     */
    const shortWeekdays = weekdays.map((item) => item.substr(0, 3))
    
    /**
     * –ú–∞—Å—Å–∏–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π –∑–∞–¥–∞–Ω–∏—è –º–∏–Ω—É—Ç –ª–∞—Ç–∏–Ω–∏—Ü–µ–π
     * @type {Array}
     */
    const minsVariants = ('m|min|mins|minutes').split('|')
    
    /**
     * –ú–∞—Å—Å–∏–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π –∑–∞–¥–∞–Ω–∏—è —á–∞—Å–æ–≤ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π
     * @type {Array}
     */
    const hoursVariants = ('h|hour|hours').split('|')
    
    /**
     * –†–µ–≥—É–ª—è—Ä–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–¥–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: <duration_value><duration_measures> [every ]<repeats>
     * –ü—Ä–∏–º–µ—Ä—ã: 2h every mon,tue
     *          100m 5, 10, 15
     *          3hour every 10
     *          30min Monday, Tuesday, Saturday
     * @type {RegExp}
     */
    self.re = new RegExp('^(?<duration_value>\\d+)\\s*(?<duration_measures>'
        + minsVariants.join('|') + '|' + hoursVariants.join('|')
        + ')\\s+(every\\s)?(?<repeats>('
        + 'day|week|month'
        + '|' + weekdays.join('|')
        + '|' + shortWeekdays.join('|')
        + '|\\d+|\\d+,\\d+|,|\\s){1,13})$', 'i')

    
    /**
     * TODO –ü–æ–Ω—è—Ç—å –Ω—É–∂–µ–Ω –ª–∏ –≤ –º–æ–¥–µ–ª–∏ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –±—ç–∫–µ–Ω–¥–æ–≤–æ–π –º–æ–¥–µ–ª–∏
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:
     *
     * XXm|h every (day|mon|tue|...|week|month|XX,XX)
     * –ü—Ä–∏–º–µ—Ä—ã:
     *   10m every day
     *   3h every sat,sun
     *   10h every week
     *
     * @param ctx
     * @param txt
     * @return {{}}
     */
    self.validateFormat = (ctx, txt) => {
        let ret
        // ret = await req.make(ctx, self.get('apiPath') + 'validate/' + encodeURIComponent(txt), {
        //     method: 'GET',
        // }).then( (response) => response.data)

        let data = self.re.exec(txt)
        
        if (data !== null) {
            ret = self.parseText(data.hasOwnProperty('groups') ? data.groups : {
                duration_value: data[1],
                duration_measures: data[2],
                repeats: data[4]
            })
        } else {
            ret = null
        }
        return ret
    }
    
    /**
     * TODO –ü–æ–Ω—è—Ç—å –Ω—É–∂–µ–Ω –ª–∏ –≤ –º–æ–¥–µ–ª–∏ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –±—ç–∫–µ–Ω–¥–æ–≤–æ–π –º–æ–¥–µ–ª–∏
     * –ü–∞—Ä—Å–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
     *
     * @param data –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–æ—Å—Ç–∏. –ü—Ä–∏–º–µ—Ä: {duration_value: 20, duration_measures: 'min', repeats: 'mon,sat}
     * @returns {{}}
     */
    self.parseText = (data) => {
        let ret = {
            duration: null,
            week_days: [],
            month_days: []
        }
        
        if (minsVariants.indexOf(data.duration_measures) !== -1) {
            ret.duration = data.duration_value
        } else if (hoursVariants.indexOf(data.duration_measures) !== -1) {
            ret.duration = data.duration_value * 60
        }
        
        let days = data.repeats.replace(/\s/, '').replace(/[;|]/, ',').toLowerCase().split(',')
        
        days.forEach((day) => {
            if (day === 'day') {
                ret.week_days = shortWeekdays
            } else if(day.match(/^\d+$/)) {
                ret.month_days.push(parseInt(day, 10))
            } else {
                let idx = weekdays.indexOf(day) !== -1
                    ? weekdays.indexOf(day)
                    : (shortWeekdays.indexOf(day) !== -1
                        ? shortWeekdays.indexOf(day)
                        : null
                    )
                if (idx !== null) {
                    ret.week_days.push(shortWeekdays[idx])
                }
            }
        })
        return ret
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     *
     * @returns {string}
     */
    self.formatDuration = () => {
        const duration = self.get('duration')
        return duration ? (duration >= 60 ? (duration / 60) + 'h' : duration + 'min') : ''
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ –æ–±—ä–µ–∫—Ç—É –∏—Ö –¥–∞–Ω–Ω—ã—Ö
     *
     * @returns {string}
     */
    self.toString = () => {
        const duration = self.get('duration')
        const week_days = self.get('week_days')
        const month_days = self.get('month_days')
        return duration && (week_days || month_days) ?
            (self.formatDuration()
                + ' every ' + (week_days.length > 0 ? (week_days.length === 7 ? 'day' : week_days.join(',')) : month_days.join(','))) : null
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param user_id - ID —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise.<*>}
     */
    self.findByUser = async (ctx, user_id) => {
        const apiPath = self.get('apiPath')

        let result = { success: false }

        if (!apiPath || apiPath === '') {
            result.error = errors.getByCode(1001) // Wrong or undefined apiPath
        } else {
            user_id = (user_id && user_id.id) || user_id || ctx.session.user.get('id')
            await req.make(ctx, '/users/' + user_id + '/contracts', {
                method: 'GET'
            }).then( async response => {
                result.success = true
                result.items = response.items
                return true
            }).catch( reason => {
                result.error = Object.assign(
                    { object: reason },
                    errors.getByCode(1203) // Exception caught in model Goal::findByUser()
                )
                console.error(result.error.message)
                console.log(result.error.object)
                return false
            })
        }

        return result
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
     * @returns {Promise.<TResult|null>}
     */
    self.findByGoal = async (ctx, id) => {
        const ret = await req.make(ctx, '/goals/' + id + '/contracts', {
            method: 'GET',
        }).then( response => {
            return response.map((contract) => (new Contract()).set(contract))
        }).catch( reason => {
            console.error(reason)
            return false
        })
    
        return ret || null
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param goal - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
     * @param owner - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise.<*>}
     */
    self.findByGoalAndOwner = async(ctx, goal, owner) => {
        return await req.make(ctx, self.get('apiPath') + '/' + goal + '/' + owner, {
            method: 'GET',
        }).then( response => {
            if (!response.error) {
                return self.set(response)
            } else {
                return null
            }
        }).catch( reason => {
            console.error(reason)
            return false
        })
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ –ø–æ–ª–Ω–æ—Ç—ã –∑–∞–ø–∏—Å–∏ / –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –µ–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    self.updateReadyState = async(ctx) => {
        self.set({ready: (await self.validateFormat(ctx, self.get('occupation'))) !== null})
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥–µ–ª–∏, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ
    self.set(Object.assign({
        apiPath: '/contracts',
        owner: null,
        goal: null,
        key: '',
        duration: 0,
        occupation: null,
        week_days: [],
        month_days: [],
        next_run: null,
        last_run: null,
        createdAt: null,
        updatedAt: null,
        ready: false
    }, data))
    
    return self
}

// –ù–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
Contract.prototype = Object.create(Base.prototype)
Contract.prototype.constructor = Contract

console.log('üî∏Ô∏è  Contract model initiated')

module.exports = Contract;