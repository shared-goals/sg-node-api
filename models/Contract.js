"use strict";

const req = require('../utils/req')

/**
 * –ö–ª–∞—Å—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∫ —Ü–µ–ª–∏
 * @constructor
 */
function Contract (data) {
    let self = this
    data = data || {}
    
    /**
     * –ê—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥–µ–ª–∏
     * @type {{owner: null, goal: null, duration: number, occupation: null, week_days: Array, month_days: Array, next_run: null, last_run: null, createdAt: null, updatedAt: null, ready: boolean}}
     */
    self.attributes = {
        owner: null,
        goal: null,
        key: '',
        duration: 0,
        occupation: null,
        week_days: [],
        month_days: [],
        next_run: null,
        last_run: null,
        createdAt: null,
        updatedAt: null,
        ready: false
    }
    
    /**
     * –ó–∞–¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—è–º
     *
     * @param data - –û–±—ä–µ–∫—Ç –∫–ª—é—á–µ–π –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
     * @returns {Goal}
     */
    self.set = (data) => {
        self.attributes = Object.assign({}, self.attributes, data)
        return self
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≤–∏–¥–µ –∏–ª–∏ –æ–±—ä–µ–∫—Ç –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –º–∞—Å—Å–∏–≤—É —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
     *
     * @param keys - –°—Ç—Ä–æ–∫–∞ –∫–ª—é—á–∞ –∏–ª–∏ –º–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π
     * @returns {*}
     */
    self.get = (keys) => {
        return keys && typeof keys !== 'undefined'
            ? (typeof keys === 'string'
                ? self.attributes[keys]
                : keys.reduce((obj, key) => ({ ...obj, [key]: self.attributes[key] }), {})
            )
            : self.attributes
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:
     * XXm|h every (day|mon|tue|...|week|month|XX,XX)
     * –ü—Ä–∏–º–µ—Ä—ã:
     *   10m every day
     *   3h every sat,sun
     *   10h every week
     *
     * @param ctx
     * @param txt
     * @return {{}}
     */
    self.validateFormat = async(ctx, txt) => {
        return await req.make(ctx, 'contracts/validate/' + encodeURIComponent(txt), {
            method: 'GET',
        }).then( (response) => response.data)
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     *
     * @returns {string}
     */
    self.formatDuration = () => {
        const duration = self.get('duration')
        return duration ? (duration >= 60 ? (duration / 60) + 'h' : duration + 'min') : ''
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ –æ–±—ä–µ–∫—Ç—É –∏—Ö –¥–∞–Ω–Ω—ã—Ö
     *
     * @returns {string}
     */
    self.toString = () => {
        const duration = self.get('duration')
        const week_days = self.get('week_days')
        const month_days = self.get('month_days')
        return duration && (week_days || month_days) ?
            (self.formatDuration()
                + ' every ' + (week_days.length > 0 ? (week_days.length === 7 ? 'day' : week_days.join(',')) : month_days.join(','))) : null
    }
    
    /**
     * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –≤ JSON-–æ–±—ä–µ–∫—Ç
     *
     * @returns {string}
     */
    self.toJSON = () => {
        return JSON.stringify(self.attributes)
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
     * @returns {Promise.<*>}
     */
    self.findById = async(ctx, id) => {
        const ret = await req.make(ctx, '/contracts/' + id, {
            method: 'GET',
        }).then( response => {
            self.set(response)
            return true
        }).catch( reason => {
            console.error(reason)
            return false
        })
    
        return ret ? self : null
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param user_id - ID —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise.<TResult|null>}
     */
    self.findByUser = async (ctx, user_id) => {
        const ret = await req.make(ctx, '/users/' + (user_id || ctx.session.user.get('id')) + '/contracts', {
            method: 'GET'
        }).then( response => {
            return response.map((contract) => (new Contract()).set(contract))
        }).catch( reason => {
            console.error(reason)
            return false
        })
    
        return ret || null
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
     * @returns {Promise.<TResult|null>}
     */
    self.findByGoal = async (ctx, id) => {
        const ret = await req.make(ctx, '/goals/' + id + '/contracts', {
            method: 'GET',
        }).then( response => {
            return response.map((contract) => (new Contract()).set(contract))
        }).catch( reason => {
            console.error(reason)
            return false
        })
    
        return ret || null
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param goal - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
     * @param owner - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise.<TResult>}
     */
    self.findByGoalAndOwner = async(ctx, goal, owner) => {
        return await req.make(ctx, '/contracts/' + goal + '/' + owner, {
            method: 'GET',
        }).then( response => {
            if (!response.error) {
                return self.set(response)
            } else {
                return null
            }
        }).catch( reason => {
            console.error(reason)
            return false
        })
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ –ø–æ–ª–Ω–æ—Ç—ã –∑–∞–ø–∏—Å–∏ / –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –µ–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    self.updateReadyState = async(ctx) => {
        self.set({ready: (await self.validateFormat(ctx, self.get('occupation'))) !== null})
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä–µ–∫—Ç –≤ –ë–î. –ê–ø–¥–µ–π—Ç–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è self.id
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @returns {Promise.<Goal>}
     */
    self.save = async(ctx) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –∞–ø–¥–µ–π—Ç–∞
        const data = self.get()
        data.owner = { id: ctx.session.user.get('id')}
        
        if (self.get('id') !== null && typeof self.get('id') !== 'undefined') {
            // –ï—Å–ª–∏ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–π–¥–∏—à–Ω–∏–∫ - —ç—Ç–æ –∞–ø–¥–µ–π—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ PUT
            await req.make(ctx, '/contracts/' + self.get('id'), Object.assign({}, self.get(), {
                method: 'PUT',
            })).then( response => {
                self.set(response)
            }).catch( reason => {
                console.error(reason)
                return false
            })
        } else {
            // –ï—Å–ª–∏ –Ω–µ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–π–¥–∏—à–Ω–∏–∫ - —ç—Ç–æ –≤—Å—Ç–∞–≤–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ POST
            await req.make(ctx, '/contracts', Object.assign({}, self.get(), {
                method: 'POST',
            })).then( response => {
                self.set(response)
            }).catch( reason => {
                console.error(reason)
                return false
            })
        }
        
        return self
    }
    
    self.set(data)
    
    return self
}

console.log('üî∏Ô∏è  Contract model initiated')

module.exports = Contract;