"use strict";

const Base = require('./base')
const req = require('../utils/req')

/**
 * –ö–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @constructor
 */
function User (data) {
    let self = this
    
    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    Base.call(this)
    
    data = data || {}
    

    /**
     * –ü—Ä–ø–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param token - –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {Promise.<TResult>}
     */
    self.checkAuth = async (ctx, token) => {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
        return await req.make(ctx, '/check', {
            token: token,
            method: 'POST'
        }).then(response => response)
        .catch(reason => {
            console.error(reason)
            return reason
        })
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param data - –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     * @returns {Promise.<TResult>}
     */
    self.addUserProvider = async (ctx, data) => {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
        if (data.id) {
            data.id = parseInt(data.id, 10)
        }
        self.get('auth').push(data)
        const ret = await req.make(ctx, '/users/' + self.get('id'), {
            method: 'PUT',
            auth: self.get('auth')
        })
        .then(response => response)
        .catch(reason => {
            console.error(reason)
            return reason
        })
        self.refresh()
        return ret
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @returns {Promise.<TResult>}
     */
    self.findAll = async (ctx) => {
        return await req.make(ctx, '/users', {
            method: 'GET'
        }).then( async (response) => {
            let users = []
            if (!response || response.length === 0) {
                console.error(ctx, '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                return null
            } else {
                for (let i = 0; i < response.length; i++) {
                    users.push((new User()).set(response[i]))
                }
            }
            return users
        }).catch( reason => {
            console.error(reason)
            return null
        })
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param query - –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
     * @param opts - –û–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
     * @returns {Promise.<TResult>}
     */
    self.search = async (ctx, query, opts) => {
        opts = opts || {}
        return await req.make(ctx, '/users/search/' + query, {
            method: 'GET'
        }).then( async (response) => {
            let users = []
            if (!response || response.length === 0) {
                console.error(ctx, '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                return null
            } else {
                for (let i = 0; i < response.length; i++) {
                    if (opts.skip_my !== true || response[i].id !== ctx.session.user.get('id')) {
                        users.push((new User()).set(response[i]))
                    }
                }
            }
            return users
        }).catch( reason => {
            console.error(reason)
            return null
        })
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param email - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise.<User>}
     */
    self.findByEmail = async (ctx, email) => {
        const ret = await req.make(ctx, '/users/email/' + encodeURIComponent(email), {
            method: 'GET'
        }).then( response => {
            self.set(response)
            return true
        }).catch( reason => {
            console.error(reason)
            return false
        })
        
        return ret ? self : null
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @returns {Promise.<*>}
     */
    self.register = async (ctx) => {
        return await req.make(ctx, '/register/', Object.assign({
            provider: 'local'
        }, self.get(), {
            method: 'POST'
        })).then( response => {
            if (response.success === true) {
                return self.set(response)
            } else {
                return response
            }
        }).catch( reason => {
            console.error(reason)
            return reason
        })
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤ —Å–µ—Å—Å–∏–∏ —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @returns {Promise.<*>}
     */
    self.refreshToken = async (ctx) => {
        const auth = await req.make(ctx, '/refresh_token/', {
            method: 'POST'
        })
        .then( response => response)
        .catch( response => {
            console.error('–°–µ—Å—Å–∏—è –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –æ—à–∏–±–∫–∞: ', response.message)
            return response
        })
        if (auth.token) {
            console.log('–°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –∏–Ω—Ñ–æ:')
            console.log(ctx.session.passport.user)
            ctx.session.passport.user = ctx.session.user.set({token: auth.token}).get()
            return { success: true }
        } else {
            return Object.assign({ success: false }, auth )
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä–µ–∫—Ç –≤ –ë–î, –∞–ø–¥–µ–π—Ç—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @returns {Promise.<Goal>}
     */
    self.save = async(ctx) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–ø–¥–µ–π—Ç–∞
        const data = self.get()
        
        await req.make(ctx, '/users/' + self.get('id'), Object.assign({}, self.get(), {
            method: 'PUT',
        })).then( response => {
            self.set(response)
        }).catch( reason => {
            console.error(reason)
            return false
        })
        
        return self
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ë–î
     *
     * @returns {Promise.<*>}
     */
    self.refresh = async(ctx) => {
        return self.findById(ctx, self.get('id'))
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥–µ–ª–∏, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ
    self.set(Object.assign({
        apiPath: '/users',
        id: null,
        createdAt: null,
        updatedAt: null,
        language: 'ru',
        username: '',
        email: '',
        password: '',
        auth: {},
        options: {},
        name: '',
        telegram_id: null
    }, data))
    
    return self
}

// –ù–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
User.prototype = Object.create(Base.prototype)
User.prototype.constructor = Base

console.log('üî∏Ô∏è  User model initiated')

module.exports = User;
