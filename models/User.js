"use strict";

const req = require('../utils/req')

/**
 * –ö–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @constructor
 */
function User (data) {
    let self = this
    data = data || {}
    
    /**
     * –ê—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥–µ–ª–∏
     * @type {{id: null, createdAt: null, updatedAt: null, language: string, username: string, email: string, password: string, name: string, telegram_id: null}}
     */
    self.attributes = {
        id: null,
        createdAt: null,
        updatedAt: null,
        language: 'ru',
        username: '',
        email: '',
        password: '',
        name: '',
        telegram_id: null
    }
    
    /**
     * –ó–∞–¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—è–º
     *
     * @param data - –û–±—ä–µ–∫—Ç –∫–ª—é—á–µ–π –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
     * @returns {Goal}
     */
    self.set = (data) => {
        self.attributes = Object.assign({}, self.attributes, data)
        return self
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≤–∏–¥–µ –∏–ª–∏ –æ–±—ä–µ–∫—Ç –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –º–∞—Å—Å–∏–≤—É —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
     *
     * @param keys - –°—Ç—Ä–æ–∫–∞ –∫–ª—é—á–∞ –∏–ª–∏ –º–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π
     * @returns {*}
     */
    self.get = (keys) => {
        return keys && typeof keys !== 'undefined'
            ? (typeof keys === 'string'
                ? self.attributes[keys]
                : keys.reduce((obj, key) => ({ ...obj, [key]: self.attributes[key] }), {})
            )
            : self.attributes
    }
    
    /**
     * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –≤ JSON-–æ–±—ä–µ–∫—Ç
     *
     * @returns {string}
     */
    self.toJSON = () => {
        return JSON.stringify(self.attributes)
    }
    
    /**
     * –ü—Ä–ø–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param token - –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {Promise.<TResult>}
     */
    self.checkAuth = async (ctx, token) => {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
        return await req.make(ctx, '/check', {
            token: token,
            method: 'POST'
        }).then(response => response)
        .catch(reason => {
            console.error(reason)
            return reason
        })
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param token - –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {Promise.<TResult>}
     */
    self.addUserProvider = async (ctx, data) => {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
        if (data.id) {
            data.id = parseInt(data.id, 10)
        }
        self.get('auth').push(data)
        return await req.make(ctx, '/users/' + self.get('id'), {
            method: 'PUT',
            auth: self.get('auth')
        })
        .then(response => response)
        .catch(reason => {
            console.error(reason)
            return reason
        })
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @returns {Promise.<TResult>}
     */
    self.findAll = async (ctx) => {
        return await req.make(ctx, '/users', {
            method: 'GET'
        }).then( async (response) => {
            let users = []
            if (!response || response.length === 0) {
                console.error(ctx, '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                return null
            } else {
                for (let i = 0; i < response.length; i++) {
                    users.push((new User()).set(response[i]))
                }
            }
            return users
        }).catch( reason => {
            console.error(reason)
            return null
        })
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise.<User>}
     */
    self.findById = async (ctx, id) => {
        const ret = await req.make(ctx, '/users/' + id, {
            method: 'GET'
        }).then( response => {
            self.set(response)
            return true
        }).catch( reason => {
            console.error(reason)
            return false
        })
    
        return ret ? self : null
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param email - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise.<User>}
     */
    self.findByEmail = async (ctx, email) => {
        const ret = await req.make(ctx, '/users/email/' + encodeURIComponent(email), {
            method: 'GET'
        }).then( response => {
            self.set(response)
            return true
        }).catch( reason => {
            console.error(reason)
            return false
        })
        
        return ret ? self : null
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @returns {Promise.<*>}
     */
    self.register = async (ctx) => {
        return await req.make(ctx, '/register/', Object.assign({
            provider: 'local'
        }, self.get(), {
            method: 'POST'
        })).then( response => {
            if (response.success === true) {
                return self.set(response)
            } else {
                return response
            }
        }).catch( reason => {
            console.error(reason)
            return reason
        })
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤ —Å–µ—Å—Å–∏–∏ —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @returns {Promise.<*>}
     */
    self.refreshToken = async (ctx) => {
        const auth = await req.make(ctx, '/refresh_token/', {
            method: 'POST'
        })
        .then( response => response)
        .catch( response => {
            console.error('–°–µ—Å—Å–∏—è –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –æ—à–∏–±–∫–∞: ', response.message)
            return response
        })
        if (auth.token) {
            console.log('–°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –∏–Ω—Ñ–æ:')
            console.log(ctx.session.passport.user)
            ctx.session.passport.user = ctx.session.user.set({token: auth.token}).get()
            return { success: true }
        } else {
            return Object.assign({ success: false }, auth )
        }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–ø—Ü–∏–∏
    self.set(data)
    
    return self
}

console.log('üî∏Ô∏è  User model initiated')

module.exports = User;
