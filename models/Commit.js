"use strict";

const Base = require('./base')
const req = require('../utils/req')
const moment = require('moment')

/**
 * –ö–ª–∞—Å—Å –∫–æ–º–º–∏—Ç–∞ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
 * @constructor
 */
function Commit (data) {
    let self = this
    
    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    Base.call(this)

    data = data || {}
    
    /**
     * –†–µ–≥—É–ª—è—Ä–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –∫–æ—Ä–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥—ã: /commit [<owner>/]<key> <duration> "<whats_done>"[ "<whats_next>"]
     * –ü—Ä–∏–º–µ—Ä: /commit ewgeniyk/sg 1h 20min "Some fixes" "Finish /commit"
     * @type {RegExp}
     */
    self.re = /((?<owner>[^/\s]+)\/)?(?<key>[^\s]+)\s+((?<hours>\d+)\s*(h|hr)\s+)?((?<minutes>\d+)\s*(m|min)\s+)?("(?<whats_done>[^"]+)")\s*("(?<whats_next>[^"]+)")?$/
    
    /**
     * –†–µ–≥—É–ª—è—Ä–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –∫–æ—Ä–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥—ã: /commit [<owner>/]<key> <duration> "<whats_done>"[ "<whats_next>"]
     * –ü—Ä–∏–º–µ—Ä: /commit ewgeniyk/sg 1h 20min "Some fixes" "Finish /commit"
     * @type {RegExp}
     */
    self.dur_re = /^\s*((?<hours>\d+)\s*(h|hr)\s*)?((?<minutes>\d+)\s*(m|min))?\s*$/
    

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, —Å —É—á–µ—Ç–æ–º –ø–æ–¥-–æ–±—ä–µ–∫—Ç–æ–≤
     *
     * @returns {string}
     */
    self.plain = () => {
        const data = JSON.parse(self.toJSON())
        data.contract = JSON.parse(data.contract)
        return data
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω—É–ª–ª, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ —Ä–µ–≥—É–ª—è—Ä–∫–µ
     *
     * @returns {{}|null}
     */
    self.validateDuration = (text) => {
        const duration = text.match(self.dur_re)
        return duration ? duration.groups : null
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     *
     * @returns {string}
     */
    self.formatDuration = () => {
        const duration = self.get('duration')
        return duration ? (duration >= 60
            ? Math.floor(duration / 60) + 'h' + (duration % 60 !== 0 ? ' ' + (duration % 60) + 'min' : '')
            : duration + 'min') : ''
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫–æ–º–º–∏—Ç—ã –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param user_id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise.<TResult|null>}
     */
    self.findByUser = async(ctx, user_id) => {
        const ret = await req.make(ctx, '/users/' + user_id + '/commits', {
            method: 'GET'
        }).then( response => {
            let commits = response.map((commit) => (new Commit()).set(commit))
            commits = self.sortBy(commits, 'createdAt', false)
            return self.formatFields(commits)
        }).catch( reason => {
            console.error(reason)
            return false
        })
    
        return ret || null
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
     * @returns {Promise.<TResult|null>}
     */
    self.findByGoal = async(ctx, id) => {
        const ret = await req.make(ctx, '/goals/' + id + '/commits', {
            method: 'GET',
        }).then( response => {
            let commits = response.map((commit) => (new Commit()).set(commit))
            commits = self.sortBy(commits, 'createdAt', false)
            return self.formatFields(commits)
        }).catch( reason => {
            console.error(reason)
            return false
        })
    
        return ret || null
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—è –º–∞—Å—Å–∏–≤–∞ –∫–æ–º–º–∏—Ç–æ–≤
     *
     * @param commits - –ú–∞—Å—Å–∏–≤ –∫–æ–º–º–∏—Ç–æ–≤
     * @returns {any[] | Array}
     */
    self.formatFields = (commits) => {
        return (commits || []).map((commit) => {
            commit.set({
                createdAt_human: moment(commit.get('createdAt')).format('DD.MM'),
                duration_human: commit.formatDuration('duration')
            })
            return commit
        })
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ –ø–æ–ª–Ω–æ—Ç—ã –∑–∞–ø–∏—Å–∏ / –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –µ–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
     */
    self.updateReadyState = () => {
        self.set({
            ready: self.get('duration') && self.get('duration') !== 0 && self.get('duration') !== ''
                && self.get('whats_done') !== ''
        })
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä–µ–∫—Ç –≤ –ë–î. –ê–ø–¥–µ–π—Ç–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è self.id
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @returns {Promise.<Goal>}
     */
    self.save = async(ctx) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –∞–ø–¥–µ–π—Ç–∞
        self.set({owner: { id: ctx.session.user.get('id')}})

        // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É, —Å—ç–π–≤–∏–º –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        // const contract = self.get('contract')
        // contract.save(ctx)
        
        const data = self.plain()
        data.contract = { id: data.contract.id }
        
        if (self.get('id') !== null && typeof self.get('id') !== 'undefined') {
            // –ï—Å–ª–∏ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–π–¥–∏—à–Ω–∏–∫ - —ç—Ç–æ –∞–ø–¥–µ–π—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ PUT
            await req.make(ctx, '/commits/' + self.get('id'), Object.assign({}, data, {
                method: 'PUT',
            })).then( response => {
                self.set(response)
            }).catch( reason => {
                console.error(reason)
                return false
            })
        } else {
            // –ï—Å–ª–∏ –Ω–µ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–π–¥–∏—à–Ω–∏–∫ - —ç—Ç–æ –≤—Å—Ç–∞–≤–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ POST
            await req.make(ctx, '/commits', Object.assign({}, data, {
                method: 'POST',
            })).then( response => {
                self.set(response)
            }).catch( reason => {
                console.error(reason)
                return false
            })
        }
        
        return self
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥–µ–ª–∏, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ
    self.set(Object.assign({
        apiPath: '/commits',
        owner: null,
        contract: null,
        duration: 0,
        whats_next: null,
        whats_done: null,
        createdAt: null,
        updatedAt: null
    }, data))
    
    return self
}

// –ù–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
Commit.prototype = Object.create(Base.prototype)
Commit.prototype.constructor = Base

console.log('üî∏Ô∏è  Commit model initiated')

module.exports = Commit;
